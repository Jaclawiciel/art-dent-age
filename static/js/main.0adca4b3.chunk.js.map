{"version":3,"sources":["components/AgeToday.js","components/AgePast.js","App.js","serviceWorker.js","index.js"],"names":["AgeToday","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","calculateAge","birthday","Date","ageDifMs","now","getTime","ageDate","Math","abs","getUTCFullYear","state","patientBirthday","age","_this2","react_default","a","createElement","className","dist_default","format","build_default","value","onChange","setState","react_countup_build_default","end","Component","AgePast","examinationDate","App","renderCurrentPage","currentPage","components_AgeToday","components_AgePast","handleNavigation","bind","assertThisInitialized","react_addons_css_transition_group_default","transitionName","transitionAppear","transitionAppearTimeout","transitionEnter","transitionLeave","onClick","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0adca4b3.chunk.js","sourcesContent":["import React from 'react';\nimport { Component } from 'react'\nimport Flatpickr from \"react-flatpickr\";\nimport Moment from \"react-moment\";\nimport CountUp from 'react-countup';\n\nclass AgeToday extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            patientBirthday: \"1996-08-30\",\n            age: 0\n        };\n    }\n\n    calculateAge = function (birthday) {\n        if (typeof birthday !== \"string\") {\n            birthday = birthday[0];\n        } else {\n            birthday = new Date(birthday);\n        }\n        var ageDifMs = Date.now() - birthday.getTime();\n        var ageDate = new Date(ageDifMs); // miliseconds from epoch\n        return Math.abs(ageDate.getUTCFullYear() - 1970);\n    };\n\n    render() {\n        let patientBirthday = this.state.patientBirthday;\n        let age = this.calculateAge(patientBirthday);\n        return (\n            <div className=\"age-today\">\n                <h2 className=\"content-title\">Wiek na dziś - <span className=\"date\"><Moment format=\"DD.MM.YYYY\"/></span> </h2>\n                <div className=\"date-wrapper\">\n                    <span className=\"date-label\">Data urodzenia</span>\n                    <Flatpickr\n                        value={patientBirthday}\n                        onChange={patientBirthday => {\n                            this.setState({\n                                patientBirthday: patientBirthday,\n                                age: this.calculateAge(patientBirthday)\n                            });\n                        }}\n                    />\n                </div>\n                <div className=\"age\">\n                    <div className=\"age-number\">\n                        <CountUp end={age}/>\n                    </div>\n                    <div className=\"age-text\">wiek</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default AgeToday","import React from 'react';\nimport {Component} from 'react'\nimport Flatpickr from \"react-flatpickr\";\nimport Moment from \"react-moment\";\nimport CountUp from \"react-countup/build\";\n\nclass AgePast extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            patientBirthday: \"1996-08-30\",\n            examinationDate: \"2019-08-30\",\n            age: 0\n        };\n    }\n\n    calculateAge = function (birthday, examinationDate) {\n        if (typeof birthday !== \"string\") {\n            birthday = birthday[0];\n        } else {\n            birthday = new Date(birthday);\n        }\n        if (typeof examinationDate !== \"string\") {\n            examinationDate = examinationDate[0];\n        } else {\n            examinationDate = new Date(examinationDate);\n        }\n        var ageDifMs = examinationDate - birthday.getTime();\n        var ageDate = new Date(ageDifMs); // miliseconds from epoch\n        return Math.abs(ageDate.getUTCFullYear() - 1970);\n    };\n\n    render() {\n        let patientBirthday = this.state.patientBirthday;\n        let examinationDate = this.state.examinationDate;\n        let age = this.calculateAge(patientBirthday, examinationDate);\n        return (\n            <div className=\"age-past\">\n                <h2 className=\"content-title\">Wiek na dzień badania</h2>\n                <div className=\"dates\">\n                    <div className=\"date-wrapper\">\n                        <span className=\"date-label\">Data urodzenia</span>\n                        <Flatpickr\n                            value={patientBirthday}\n                            onChange={patientBirthday => {\n                                this.setState({\n                                    patientBirthday: patientBirthday,\n                                    age: this.calculateAge(patientBirthday, examinationDate)\n                                });\n                            }}\n                        />\n                    </div>\n                    <div className=\"date-wrapper\">\n                        <span className=\"date-label\">Data badania</span>\n                        <Flatpickr\n                            value={examinationDate}\n                            onChange={examinationDate => {\n                                this.setState({\n                                    examinationDate: examinationDate,\n                                    age: this.calculateAge(patientBirthday, examinationDate)\n                                });\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"age\">\n                    <div className=\"age-number\">\n                        <CountUp end={age}/>\n                    </div>\n                    <div className=\"age-text\">wiek</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default AgePast;","import React from 'react';\nimport {Component} from 'react'\nimport 'flatpickr/dist/themes/material_green.css'\nimport 'moment/locale/pl';\nimport './App.css';\nimport AgeToday from \"./components/AgeToday\";\nimport AgePast from \"./components/AgePast\";\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport {TransitionGroup, CSSTransition} from \"react-transition-group\";\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            currentPage: 'today'\n        };\n\n        this.handleNavigation = this.handleNavigation.bind(this);\n    }\n\n    handleNavigation(currentPage) {\n        this.setState({currentPage: currentPage});\n    }\n\n    renderCurrentPage = function () {\n        if (this.state.currentPage === 'today') {\n            return <AgeToday/>;\n        } else {\n            return <AgePast/>;\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"app\">\n                <ReactCSSTransitionGroup\n                    transitionName=\"example\"\n                    transitionAppear={true}\n                    transitionAppearTimeout={500}\n                    transitionEnter={true}\n                    transitionLeave={true}\n                    className=\"animation-container\"\n                >\n                    <div className=\"wrapper\">\n                        <header className=\"header\">\n                            <h1 className=\"header-title\">Wiek pacjentów</h1>\n                            <nav className=\"nav\">\n                                <button className={this.state.currentPage === 'today' ? 'nav-btn active' : 'nav-btn'}\n                                        onClick={() => this.handleNavigation('today')}>Wiek na dzisiaj\n                                </button>\n                                <button className={this.state.currentPage === 'past' ? 'nav-btn active' : 'nav-btn'}\n                                        onClick={() => this.handleNavigation('past')}>Wiek na dzień badania\n                                </button>\n                            </nav>\n                        </header>\n\n                        <div className=\"content\">\n                            {this.renderCurrentPage()}\n                        </div>\n                    </div>\n\n                    <footer className=\"footer\">\n                        © 2019 ARTdent by\n                        <a href=\"http://jacekgalka.pl?utm_source=artdent&utm_medium=footer-link\">\n                            Jacek Gałka\n                            <div className=\"footer-border\"></div>\n                        </a>\n                    </footer>\n                </ReactCSSTransitionGroup>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}