{"version":3,"sources":["images/logo.jpg","components/AgeToday.js","components/AgePast.js","App.js","components/Logo.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AgeToday","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","patientBirthday","Date","_this2","react_default","a","createElement","className","dist_default","format","build_default","value","onChange","setState","locale","diff","toString","unit","Component","AgePast","examinationDate","App","renderCurrentPage","currentPage","components_AgeToday","components_AgePast","handleNavigation","bind","assertThisInitialized","onClick","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c210d13d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9a2ec625.jpg\";","import React from 'react';\nimport { Component } from 'react'\nimport Flatpickr from \"react-flatpickr\";\nimport Moment from \"react-moment\";\n\nclass AgeToday extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            patientBirthday: new Date(\"1996-08-30\")\n        };\n    }\n\n    render() {\n        let { patientBirthday } = this.state;\n        return (\n            <div className=\"age-today\">\n                <h2 className=\"content-title\">Wiek na dziś - <span className=\"date\"><Moment format=\"DD.MM.YYYY\"/></span> </h2>\n                <Flatpickr\n                    value={patientBirthday}\n                    onChange={patientBirthday => { this.setState({patientBirthday}) }}\n                />\n                <div className=\"age\">\n                    <div className=\"age-number\">\n                        <Moment locale=\"pl\" diff={patientBirthday.toString()} unit=\"years\">{new Date()}</Moment>\n                    </div>\n                    <div className=\"age-text\">Wiek</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default AgeToday","import React from 'react';\nimport { Component } from 'react'\nimport Flatpickr from \"react-flatpickr\";\nimport Moment from \"react-moment\";\n\nclass AgePast extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            patientBirthday: new Date(\"1996-08-30\"),\n            examinationDate: new Date()\n        };\n    }\n\n    render() {\n        let patientBirthday = this.state.patientBirthday;\n        let examinationDate = this.state.examinationDate;\n        return (\n            <div className=\"age-today\">\n                <h4>WIEK NA DZIEŃ BADANIA</h4>\n                Data urodzenia:\n                <Flatpickr\n                    value={patientBirthday}\n                    onChange={patientBirthday => { this.setState({patientBirthday}) }}\n                />\n                <br />\n                Data badania:\n                <Flatpickr\n                    value={examinationDate}\n                    onChange={examinationDate => { this.setState({examinationDate}) }}\n                />\n                <h3>\n                    Wiek: <Moment locale=\"pl\" diff={patientBirthday.toString()} unit=\"years\">{examinationDate.toString()}</Moment>\n                </h3>\n                {/*<p>A dokładniej: <Moment*/}\n                {/*    locale=\"pl-pl\"*/}\n                {/*    duration={patientBirthday.toString()}*/}\n                {/*    date={examinationDate.toString()}*/}\n                {/*    unit=\"years\"*/}\n                {/*/></p>*/}\n            </div>\n        )\n    }\n}\n\nexport default AgePast;","import React from 'react';\nimport {Component} from 'react'\nimport 'flatpickr/dist/themes/material_green.css'\nimport 'moment/locale/pl';\nimport './App.css';\nimport AgeToday from \"./components/AgeToday\";\nimport AgePast from \"./components/AgePast\";\nimport Logo from './components/Logo';\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            currentPage: 'today'\n        };\n\n        this.handleNavigation = this.handleNavigation.bind(this);\n    }\n\n    handleNavigation(currentPage) {\n        this.setState({currentPage: currentPage});\n    }\n\n    renderCurrentPage = function() {\n        if (this.state.currentPage === 'today') {\n            return <AgeToday />;\n        } else {\n            return <AgePast />;\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"app\">\n                <header className=\"header\">\n                    <h1 className=\"header-title\">Uzupełnianie wieku pacjentów</h1>\n                    <nav className=\"nav\">\n                        <button className={this.state.currentPage === 'today' ? 'nav-btn active' : 'nav-btn'} onClick={() => this.handleNavigation('today')}>Wiek na dzisiaj</button>\n                        <button className={this.state.currentPage === 'past' ? 'nav-btn active' : 'nav-btn'} onClick={() => this.handleNavigation('past')}>Wiek na dzień badania</button>\n                    </nav>\n                </header>\n                <div className=\"content\">\n\n                    {this.renderCurrentPage()}\n                </div>\n\n                <footer className=\"footer\">\n                    © 2019 ARTdent by\n                    <a href=\"http://jacekgalka.pl?utm_source=artdent&utm_medium=footer-link\">\n                        Jacek Gałka\n                        <div className=\"footer-border\"></div>\n                    </a>\n                </footer>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport {Component} from 'react';\nimport logo from '../images/logo.jpg';\n\nclass Logo extends Component {\n    constructor() {\n        super()\n    }\n\n    render() {\n        return (\n          <div className=\"logo\">\n              <img src={logo} alt=\"logo\" />\n          </div>\n        );\n    }\n}\n\nexport default Logo;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}